#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#define SensorTurb  A0 //Turbidity data wire is plugged into pin A0
#define DS18B20 2 //Temperature data wire is plugged into pin 2
float voltage,turbidity,temp; //Setup two variables for turbidity data and one for temperature
OneWire ourWire(DS18B20); //Setup a oneWire instance to communicate with any OneWire device, not just Maxim/Dallas temperature ICs
DallasTemperature sensor(&ourWire); //Pass our oneWire reference to Dallas Temperature
 
//Wi-Fi Settings
const char* ssid = "*******"; //your wireless network name (SSID)
const char* password = "********"; //your Wi-Fi network password
WiFiClient client;
 
//ThingSpeak Settings
const int channelID = 1018843;
String writeAPIKey = "RAEIE844H9F8GAXP"; //write API key for your ThingSpeak Channel
const char* server = "api.thingspeak.com";
const int postingInterval = 1000; //post data every x seconds
 
void setup()
{
  Serial.begin(9600); //Serial communication speed 9600 baud rate setting
  sensor.begin();   
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
  delay(500);
  }
}
 
void loop()
{  
  if (client.connect(server, 80))
  {    
    voltage = 0.004888*analogRead(SensorTurb); //Read Analog voltage in V (A0) 
    turbidity = -1120.4*voltage*voltage+5742.3*voltage-4352.9; //Compute turbidity in NTU
    Serial.println("Voltage="+String(voltage)+" V Turbidity="+String(turbidity)+" NTU");  
    sensor.requestTemperatures(); //call sensor.requestTemperatures() to issue a global temperature
    temp = sensor.getTempCByIndex(0); //You can have more than one DS18B20 on the same bus. 0 refers to the first IC on the wire
    Serial.println("Temperature is: "+String(temp)); 
    // Construct API request body
    String body = "&field1=";
           body += String(voltage);
           body += "&field2=";
           body += String(turbidity);
           body += "&field3=";
           body += String(temp);           
    client.println("POST /update HTTP/1.1");
    client.println("Host: api.thingspeak.com");
    client.println("User-Agent: ESP8266 (nothans)/1.0");
    client.println("Connection: close");
    client.println("X-THINGSPEAKAPIKEY: " + writeAPIKey);
    client.println("Content-Type: application/x-www-form-urlencoded");
    client.println("Content-Length: " + String(body.length()));
    client.println("");
    client.print(body);
  }
  client.stop();
  delay(postingInterval); //wait and then post again
}
